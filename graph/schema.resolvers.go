package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"log"

	model1 "github.com/openbrighton/graphql-service/graph/model"
)

// SubmitContact is the resolver for the submitContact field.
func (r *mutationResolver) SubmitContact(ctx context.Context, input model1.ContactInput) (bool, error) {
	templateData := `{"email": "` + input.Email + `", "message": "` + input.Message + `"}`
	err := SendEmail(ctx, CONTACT_EMAIL, NO_REPLY_EMAIL, "GenericEmail", templateData)
	if err != nil {
		log.Printf("failed to send email: %v", err)
		return false, err
	}
	return true, nil
}

// Whoami is the resolver for the whoami field.
func (r *queryResolver) Whoami(ctx context.Context) (*model1.User, error) {
	return nil, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
